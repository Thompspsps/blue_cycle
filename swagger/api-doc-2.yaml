openapi: 3.0.0

info:
  title: Swagger BlueCycle - OpenAPI 3.0
  description: |-
        This API provides a comprehensive interface for managing user access, coupon transactions, and machine administration within the BlueCycle system. It serves both authenticated users (citizens) and service administrators by offering endpoints for account management, coupon interactions and system operations.

        The endpoints are divided according to the level of authorization required: the admin role can do the same things as the regular user. 

        ### User (Citizen) Actions
        Through this API, users can:
          - Register a new account and manage their login credentials.
          - Retrieve and update personal details, including changing their password and points credit.
          - Browse all available coupons in the store and add desired coupons to their wishlist.
          - Acquire new coupons, view all acquired coupons, and manage wishlist items.
          - Review transaction history.

        ### Administrative only Actions
        The API also supports various actions for service administrators, enabling them to manage system operations and configurations related to the service:
          - Add or remove coupons from the store.
          - Manage machine assets, including adding new machines and modifying their availability status.
          - Access detailed transaction records for each machine and user.

        ### Machine Actions
        can create new transactions
        
        This documentation includes all relevant details for integrating with and effectively using the BlueCycle API, helping both user and admin roles perform their necessary tasks efficiently.

  version: 1.0.0

servers:
  - url: http://api.example.com/api/v1
    description: Some production server
  - url: http://localhost:3000/api/v1
    description: Local sandbox server for testing

tags:
  - name: user actions
    description: operations allowed for regular users(and admin)
  - name: admin actions
    description: operations available only to administrative staff
  - name: machine actions
    description: operations automatically performed by the machine 

paths:
  /auth:
    post:
      summary: Allows user authentication
      description: Authenticates a user and returns a JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                  description: Email dell'utente registrato.
                password:
                  type: string
                  format: password
                  example: Pass1234!
                  description: Password dell'utente registrato.
              required:
                - email
                - password
      responses:
        '200':
          description: Login effettuato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Authentication successfull
                  data: #token
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMyIsImVtYWlsIjoidXNlckBleGFtcGxlLmNvbSIsImlhdCI6MTYyNjUxNjUyOX0.sHvv3pqyWoMsTz_B9ysaxsz_lg6vchMgfP95nHYASmY"
                    description: Token JWT per accedere alle API protette.
        '400':
          description: Wrong Credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Wrong Credentials
                  data:
                    example: null
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User Not Found
                  data:
                    example: null
                  
  /users:
    get:
      tags:
        - user actions
      summary: Returns a list of users
      description: Fetches a comprehensive list of users within the system
      parameters:
      - in: query
        name: id
        schema:
          type: integer
        required: false
      - in: query
        name: email
        schema:
          type: string
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/user"

    post: 
      tags:
        - user actions
      summary: Adds a new user to the system
      description: Creates a new user account within the system
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: mangusteo@gmail.com
                name:
                  type: string
                  example: Mario Rossi
        description: Credentials provided by SpID and CieID authentication systems
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    $ref: "#/components/schemas/user"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: The user already exists
                  data:
                    example: null

  /users/{id}:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: integer
    get:
      tags:
        - user actions
      summary: Retrieves a user by ID
      description: Fetches detailed information for a specific user given its unique ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    $ref: "#/components/schemas/user"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No registered user matches the provided ID
                  data:
                    example: null
    patch:
      tags: 
        - user actions
      summary: Changes user's details
      description: Allows to change user's password and update points
      requestBody:
        required: false       # NOT SUREEEEEEEEEEEEEEEEEEEEEEEEEE
        content:
          application/json:
            schema:
              type: object
              properties:
                credentials:
                  type: object
                  properties:
                    oldPassword:
                      type: string
                    newPassword:
                      type: string
                deltaPoints:
                  type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Updated successfully
                  data:
                    $ref: "#/components/schemas/user"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Could not udpate
                  data:
                    example: null

        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User not found
                  data:
                    example: null

  /users/{id}/coupons:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: integer
    get:
      tags:
        - user actions
      summary: Returns a list of coupons
      description: Fetches and returns a list of all coupons owned by a specific user
      parameters:
      - in: query
        name: used
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  succcess:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:   
                    type: array
                    items:
                      $ref: "#/components/schemas/coupon"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User not found
                  data:
                    example: null

    post:
      summary: Adds a new coupon to the user's profile
      description: Adds a new coupon from the store to the user's profile
      tags:
      - user actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: integer
              example: /store/rewards/932840234
              description: Link to the coupon
      responses:
        "201":
          description: Added
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Added
                  data:
                    $ref: "#/components/schemas/coupon"

  /users/{id}/wishlist:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: integer
    get:
      tags:
      - user actions
      summary: Returns user's wishlist
      description: Fetches all saved coupons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/coupon"
    post:
      tags:
      - user actions
      summary: Adds a coupon to the user's wishlist
      description: Adds a specified coupon to the wishlist of the user with the given ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: integer
              example: /store/rewards/932840234
              description: Link to the coupon
      responses:
        "201":
          description: Added
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Coupon successfully added to wishlist
                  data:
                    $ref: "#/components/schemas/coupon"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid coupon data
                  data:
                    example: null
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No user matches the provided ID
                  data:
                    example: null
        "409":
          description: Conflict wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Coupon already exists in the user's wishlist
                  data:
                    example: null

  /users/{id}/transactions:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: integer
    get:
      tags:
      - user actions
      summary: not now
      description: not now
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/transaction"

  /machines:
    get:
      tags:
        - user actions
      summary: Returns a list of machines
      description: Fetches a list of all machines installed and registered in the system
      parameters:
      - in: query
        name: available
        required: false
        schema:
          type: string
      - in: query
        name: prossimity
        required: false
        schema:
          type: object
          properties:
            range:
              type: integer
            position:
              type: object
              properties:
                latitude:
                  type: number
                  format: double
                longitude:
                  type: number
                  format: double

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/machine"
        "400":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  messsage:
                    type: string
                    example: Malformed request syntax
                  data:
                    example: null
    post:
      tags:
        - admin actions
      summary: Adds a new machine to the system
      description: Creates a new machine within the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/machine"    
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    $ref: "#/components/schemas/machine"

  /machines/{id}:
    parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
    get:
      tags: 
      - user actions
      summary: Returns a machine by ID
      description: Fetches detailed information for a specific machine given its unique ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    $ref: "#/components/schemas/machine"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No machine matches the provided ID
                  data:
                    example: null

    patch:
      tags: 
        - admin actions
      summary: Updates machine's availability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                available:
                  type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    example: null
        "404":
          description: Machine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No machine matches the provided ID
                  data:
                    example: null

  /machines/{id}/transactions:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: integer
    get:
      tags:
      - admin actions
      summary: not now
      description: not now
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/transaction"

        
  /store/rewards:
    get:
      tags:
        - user actions
      summary: Returns a list of coupons
      description: Fetches a list of all coupons available on the system
      parameters:
      - in: query
        name: store
        schema:
          type: string
        required: false
      - in: query
        name: points
        schema:
          type: integer
        required: false
      - in: query
        name: expiration
        schema:
          type: string
          format: date
        required: false
      - in: query
        name: discount
        schema:
          type: integer
        required: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                message:
                  type: string
                  example: OK
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/coupon"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  messsage:
                    type: string
                    example: Malformed request syntax
                  data:
                    example: null
    post:
      tags:
        - admin actions
      summary: Creates a new coupon
      description: Adds a new coupon to the rewards store
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                store:
                  type: string
                discount:
                  type: integer # coupon pertentage discount
                  minimum: 1
                  maximum: 100
                price:
                  type: integer
                description:
                  type: string
                expiration:
                  type: string
                  format: date
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    $ref: "#/components/schemas/coupon"


  /store/rewards/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    delete:
      tags:
        - admin actions
      summary: Deletes an existing coupon
      description: Removes a coupon from the rewards store
      responses:
        "204":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message: 
                    type: string
                    example: Coupon deleted
                  data:
                    example: null

        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message: 
                    type: string
                    example: Coupon not found
                  data:
                    example: null

  /tranasctions:
    post:
      security:
      - AdminAuth: []
      tags:
      - machine actions
      summary: Registers a new transacion
      description: not now
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/transaction"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    example: null


components:
  schemas:
    user:
      type: object
      properties:
        id:
          type: integer #specificare il formato dell'id
          description: The unique identifier of the user within the system
          example: 92378427
        email:
          type: string
          description: user email address
          example: mangusteo@gmail.com
        name:
          type: string
          example: Mario Rossi
        password:
          type: string
        points:
          type: integer
          description: points credit
          default: 0
          minimum: 0
          example: 29

    machine:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the machine within the system
        location:
          type: object
          properties:
            latitude:
              type: number
              format: double
              example: 46.071720
            longitude:
              type: number
              format: double
              example: 11.120600
        available:
          type: boolean
          example: true
    
    couponPrototype:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the coupon within the system
        store:
          type: string
          description: store's name
        discount:
          type: integer # coupon pertentage discount
          minimum: 1
          maximum: 100
          example: 15 # %
        price:
          type: integer
          minimum: 1
          description: points required to acquire the coupon
        description:
          type: string

    coupon:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the coupon within the system
        code:
          type: string
        store:
          type: string
          description: store's name
        discount:
          type: integer # coupon pertentage discount
          minimum: 1
          maximum: 100
          example: 15 # %
        price:
          type: integer
          minimum: 1
        description:
          type: string
        used:
          type: boolean
          default: false
        expiration:
          type: string
          format: date
          description: date in ISO 8601 (YYYY-MM-DD) format
         
    transaction:
      required:
        - machine
        - user
      type: object
      properties:
        user:
          type: integer
          description: link to the user
        machine:
          type: integer
          description: link to the machine
        date:
          type: string
          format: date
          description: date in ISO 8601 (YYYY-MM-DD) format
        collected: # each bottle is a point to the user's profile
          type: integer
          examples: 4
    
  securitySchemes:
    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    UserAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    MachineAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# introdurre nuovi codici di errore:
# 401 Unauthorized: Indica che il client non è autenticato o non ha fornito credenziali valide. Questo è il codice corretto se, ad esempio, manca un token JWT o il token fornito è scaduto/non valido.

# 403 Forbidden: Indica che il client è autenticato, ma non ha i permessi necessari per accedere alla risorsa. Questo si verifica, ad esempio, quando un utente autenticato con ruolo "utente" tenta di accedere a una risorsa riservata agli amministratori.      
